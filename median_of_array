[[programming]]
= Input-Output Relations =
| len(arr) | L | R |
|----------|---|---|
| 1        | 0 | 0 |
| 2        | 0 | 1 |
| 3        | 1 | 1 |
| 4        | 1 | 2 |
| 5        | 2 | 2 |
| 6        | 2 | 3 |
...

= Code =
For each len(arr), *L = (len(arr)-1)//2* and *R = len(arr)//2*.
{{{python
def get_median_array_0(arr):
	return (arr[(len(arr)-1)//2)+arr[len(arr)//2])/2
}}}

It can be observed a pattern in which for all equal pairs of L & R, starting from L = 0 & R = 0, len(arr)+1 is
L = L & R += 1, and if unequal, L = R & R = R.
{{{python
def recursive_median(arr, l=0, r=0):
    # As soon as what l has traversed plus what r has, which will be
    # different if len(arr) is even (l < r) and same if odd (l == r), is
    # greater than or equal to len(arr), (when l == r, what is after l == r
    # is the same length to traverse; and when l < r, two perfect
    # halves traversed), return median.
    if l+1+r >= len(arr):
        return (arr[l]+arr[r])/2
    if (l+1+r) % 2 == 0: # l < r, l and r are a pair of items.
        return func(arr, r, r) # Advance l to r.
    # l == r, l+r == 2l or 2r, 2a always even, +1 odd. l and r are one item.
    return func(arr, l, r+1) # Advance r.
}}}

Or viceversa, for all odd len(arr), starting on 1, *R = len(arr)//2 & L = (len(arr)-1)-R*.
{{{python
def get_median_array_1(arr):
    R = len(arr)//2; L = (len(arr)-1)-R
    return (arr[L]+arr[R])/2
}}}
